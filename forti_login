#!/bin/bash

# Enable curl alias
alias curl="curl --insecure --max-time 5 --silent --user-agent \
	'Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko'"
shopt -s expand_aliases

USERNAME=""
PASSWORD=""
KEEPALIVE_URL=""
SLEEP_PID=""

cmd_available() {
	command -v "$1" &> /dev/null
}

# Print arguments to stderr and exit
fail() {
	printf "%s\n" "$*" 1>&2
	exit 1
}

get_effective_url() {
	curl --location --output /dev/null --write-out "%{url_effective}" "$1"
}

# Is stdout open and refers to a terminal?
is_stdout_term() {
	[[ -t 1 ]]
}

# Remove $2 from front and $3 from back of the string $1
remove_substr() {
	local tmp=${1##$2}
	echo "${tmp%%$3}"
}

# Get username and password from parameters/stdin
get_credentials() {
	if [[ $# -eq 0 ]]
	then
		read -rp "Username: " USERNAME
		read -rst 30 -p "Password: " PASSWORD && echo ""
	elif [[ $# -eq 1 ]]
	then
		USERNAME=$1
		read -rst 30 -p "Password: " PASSWORD && echo ""
	else
		USERNAME=$1
		PASSWORD=$2
	fi
}

# Display a countdown for $1 seconds with $2 prefixed and $3 suffixed
display_countdown() {
	local secs=$1
	while [[ $secs -gt 0 ]]
	do
		echo -ne "\033[0K\r$2 $secs $3"
		sleep 1
		: $((--secs))
	done
}

do_logout() {
	local logout_url=${KEEPALIVE_URL/keepalive/logout}
	if curl "$logout_url" &> /dev/null
	then
		echo "" && echo "Logged out."
	else
		fail "Error logging out."
	fi
}

keepalive() {
	local html countdown
	while true
	do
		html=$(curl --output - "$KEEPALIVE_URL")
		if [[ $? -ne 0 ]]
		then
			fail "Error in authentication refresh."
		fi

		countdown=$(remove_substr "$html" \
					"*var countDownTime=" \
					" + 1;*")
		countdown=$((countdown - 5))

		# Display a countdown if stdout is a terminal
		if is_stdout_term
		then
			display_countdown "$countdown" \
				"Authentication refresh in" \
				"seconds."
		else
			sleep "$countdown" & SLEEP_PID=$!
			wait "$SLEEP_PID"
		fi
	done
}

# Logout & kill subprocesses
cleanup() {
	disown -a
	[[ -n "$SLEEP_PID" ]] && kill "$SLEEP_PID" &> /dev/null
	do_logout
}

main() {
	local google effective_url base_url magic html

	# Do we have curl?
	cmd_available "curl" || fail "Please install curl."

	google="www.google.com/"
	effective_url=$(get_effective_url "$google")

	# Did we get redirected to the authentication page?
	echo "$effective_url" | grep -q "fgtauth" || \
		fail "Did NOT get redirected to authentication page."

	# Get login credentials
	get_credentials "$@" || fail "\nFailed to get login credentials."

	# Extract base URL and magic parameter
	base_url=$(remove_substr "$effective_url" "" "fgtauth*")
	magic=$(remove_substr "$effective_url" "*fgtauth\?" "" )

	# POST form data to base_url
	html=$(curl --output - \
			--data-urlencode 4Tredir="$google" \
			--data-urlencode magic="$magic" \
			--data-urlencode username="$USERNAME" \
			--data-urlencode password="$PASSWORD" \
			"$base_url")

	# Failed?
	echo "$html" | grep -qi "failed" && fail "Authentication failed."

	echo "Logged in."
	if is_stdout_term
	then
		echo "Press Ctrl-C to logout."
	fi

	KEEPALIVE_URL=$(remove_substr "$html" "*location.href=\"" "\";*")

	cleanup
}

main "$@"
